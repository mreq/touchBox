// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    $.fn.touchBox = function(customOptions) {
      var alignImage, arrows, body, box, count, extractUrlFrom, g, hide, init, isTouchDevice, isValidIndex, items, loadImage, makeASpring, makePlaceholders, max, min, moveToIndex, options, overlay, placeImage, placeholders, preloadImages, show, showNext, showPrevious, toggleArrows, wrap;
      options = $.extend({}, $.fn.touchBox.defaultOptions, customOptions);
      items = this;
      body = $('body');
      wrap = $('<div class="touchBox hide"></div>');
      overlay = $('<div class="touchBox-overlay"></div>');
      box = $('<ul class="touchBox-ul"></ul>');
      arrows = {
        left: $('<div class="touchBox-arrow touchBox-left"></div>'),
        right: $('<div class="touchBox-arrow touchBox-right"></div>')
      };
      placeholders = $([]);
      g = {
        index: 0,
        visible: false,
        init: false
      };
      count = items.length;
      min = 0;
      max = count - 1;
      isTouchDevice = __indexOf.call(window, 'ontouchstart') >= 0;
      makePlaceholders = function() {
        return items.each(function(index) {
          return placeholders = placeholders.add($("<li class=\"touchBox-placeholder\" data-index=\"" + index + "\"></li>"));
        });
      };
      isValidIndex = function(index) {
        if (index < min) {
          return false;
        }
        if (index > max) {
          return false;
        }
        return true;
      };
      extractUrlFrom = function(item) {
        return item.attr('href');
      };
      toggleArrows = function() {
        if (g.index === min) {
          return arrows.left.addClass('hide');
        } else {
          arrows.left.removeClass('hide');
          if (g.index === max) {
            return arrows.right.addClass('hide');
          } else {
            return arrows.right.removeClass('hide');
          }
        }
      };
      makeASpring = function(direction) {
        var callback, className;
        className = "" + direction + "Spring";
        box.addClass(className);
        callback = function() {
          return box.removeClass(className);
        };
        return setTimeout(callback, 500);
      };
      alignImage = function(img) {
        var h, w;
        w = img.width();
        h = img.height();
        img.attr({
          width: w,
          height: h
        });
        return img.css({
          marginLeft: -w / 2,
          marginTop: -h / 2
        });
      };
      loadImage = function(src, callback) {
        var img;
        img = $('<img alt="touchBox image" class="touchBox-image" />').one('load', function() {
          alignImage(img);
          console.log(img);
          return callback.call(img);
        });
        return img.attr({
          src: src
        });
      };
      placeImage = function(index) {
        var item, placeholder, url;
        if (!isValidIndex(index)) {
          return false;
        }
        item = items.eq(index);
        placeholder = placeholders.eq(index);
        url = extractUrlFrom(item);
        return loadImage(url, function() {
          return placeholder.addClass('loaded').html(this);
        });
      };
      moveToIndex = function(index) {
        if (!isValidIndex(index)) {
          return false;
        }
        box.css({
          left: "-" + (100 * index) + "%"
        });
        g.index = index;
        return wrap.trigger('moved');
      };
      showNext = function() {
        var index;
        index = g.index + 1;
        if (isValidIndex(index)) {
          return moveToIndex(index);
        } else {
          return makeASpring('right');
        }
      };
      showPrevious = function() {
        var index;
        index = g.index - 1;
        if (isValidIndex(index)) {
          return moveToIndex(index);
        } else {
          return makeASpring('left');
        }
      };
      preloadImages = function() {
        var end, start, _results;
        start = g.index - options.imagesToPreload;
        if (start < min) {
          start = min;
        }
        end = g.index + options.imagesToPreload;
        if (end > max) {
          end = max;
        }
        _results = [];
        while (start < end) {
          placeImage(start);
          _results.push(start++);
        }
        return _results;
      };
      init = function(index) {
        if (!index) {
          index = g.index;
        }
        if (typeof window.touchBoxCount === 'undefined') {
          window.touchBoxCount = 0;
        } else {
          window.touchBoxCount++;
        }
        g.init = true;
        makePlaceholders();
        box.append(placeholders);
        box.width("" + (count * 100) + "%");
        wrap.attr({
          id: "touchBox-" + window.touchBoxCount
        });
        wrap.append(overlay);
        wrap.append(box);
        body.append(wrap);
        moveToIndex(index);
        return show();
      };
      show = function(index) {
        if (!index) {
          index = 0;
        }
        if (g.init) {
          return wrap.removeClass('hide');
        } else {
          init(index);
          return wrap.removeClass('hide');
        }
      };
      hide = function() {
        return wrap.removeClass('hide');
      };
      wrap.on('moved', function() {
        toggleArrows();
        return preloadImages();
      });
      items.on('click', function(e) {
        var index;
        e.preventDefault();
        index = items.index(this);
        return show(index);
      });
      $(window).on('keydown', function(e) {
        if (e.keyCode === 37) {
          showPrevious();
        }
        if (e.keyCode === 39) {
          showNext();
        }
        if (e.keyCode === 27) {
          return hideBox();
        }
      });
      overlay.on('click', hide);
      return init();
    };
    return $.fn.touchBox.defaultOptions = {
      imagesToPreload: 2
    };
  });

}).call(this);
